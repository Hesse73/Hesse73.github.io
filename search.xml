<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python获取OpenCV官方文档并保存为Markdown文件</title>
      <link href="/2020/08/21/Python%E8%8E%B7%E5%8F%96OpenCV%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E5%B9%B6%E4%BF%9D%E5%AD%98%E4%B8%BAMarkdown%E6%96%87%E4%BB%B6/"/>
      <url>/2020/08/21/Python%E8%8E%B7%E5%8F%96OpenCV%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E5%B9%B6%E4%BF%9D%E5%AD%98%E4%B8%BAMarkdown%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>看到一个html转markdown的工具，拿来试试保存OpenCV文档&lt;(￣︶￣)</p><hr><h3 id="OpenCV官网文档："><a href="#OpenCV官网文档：" class="headerlink" title="OpenCV官网文档："></a>OpenCV官网文档：</h3><p>如图所示，“top”和“footer”部分是不需要的内容，直接删除即可：</p><p><img src="/2020/08/21/Python%E8%8E%B7%E5%8F%96OpenCV%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E5%B9%B6%E4%BF%9D%E5%AD%98%E4%B8%BAMarkdown%E6%96%87%E4%BB%B6/Pic1.png" alt="官网页面"></p><p>网页中的代码框并非使用code标签，需要更改：<br><img src="/2020/08/21/Python%E8%8E%B7%E5%8F%96OpenCV%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E5%B9%B6%E4%BF%9D%E5%AD%98%E4%B8%BAMarkdown%E6%96%87%E4%BB%B6/Pic2.png" alt="代码框"></p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><pre><code class="python">import requestsfrom bs4 import BeautifulSoupimport html2text as ht#打开并解析网页html = requests.get(    &#39;https://docs.opencv.org/master/d3/df2/tutorial_py_basic_ops.html&#39;).textsoup = BeautifulSoup(html)#删除top和addresssoup.find(&#39;div&#39;, id=&#39;top&#39;).extract()soup.find(&#39;address&#39;, class_=&#39;footer&#39;).extract()#为了美观，将网页页眉的标签改为&lt;h1&gt;header = soup.find(&#39;div&#39;, class_=&#39;header&#39;)new_h = soup.new_tag(&#39;h1&#39;)new_h.append(header.text)header.insert_after(new_h)#删除原页眉内容soup.find(&#39;div&#39;, class_=&#39;headertitle&#39;).extract()#将网页中的代码框替换为&lt;code&gt;格式for fragment in soup.find_all(&#39;div&#39;, class_=&#39;fragment&#39;):    &#39;&#39;&#39;    遍历所有的代码框，在其中添加code标签    并将原有内容按行复制到code标签中    &#39;&#39;&#39;    new_tag = soup.new_tag(&#39;code&#39;)    for line in fragment.contents:        new_p = soup.new_tag(&#39;p&#39;)        new_p.append(line.text)        new_tag.append(new_p)    fragment.insert_after(new_tag)#删除原有的代码for line in soup.find_all(&#39;div&#39;, class_=&#39;line&#39;):    line.extract()html = str(soup)#使用html2text工具将html转为Markdownmd = ht.HTML2Text()md.ignore_links = Truemdfile = md.handle(html)#这里可能是html2text的问题，不能将code格式转为代码块，故手动改一下mdfile = mdfile.replace(&#39;`&#39;, &#39;```&#39;)file = open(&#39;test.md&#39;, &#39;w&#39;)file.write(mdfile)</code></pre><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><p>结果非常的Amazing啊！不多说，上图片：</p><p><img src="/2020/08/21/Python%E8%8E%B7%E5%8F%96OpenCV%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E5%B9%B6%E4%BF%9D%E5%AD%98%E4%B8%BAMarkdown%E6%96%87%E4%BB%B6/Pic3.png" alt="MarkDown结果"></p><p>这里再贴上用Hexo渲染的一段：</p><blockquote><h1 id="Basic-Operations-on-Images"><a href="#Basic-Operations-on-Images" class="headerlink" title="Basic Operations on Images"></a>Basic Operations on Images</h1><h2 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h2><p>Learn to:</p><ul><li>Access pixel values and modify them</li><li>Access image properties</li><li>Set a Region of Interest (ROI)</li><li>Split and merge images</li></ul><p>Almost all the operations in this section are mainly related to Numpy rather<br>than OpenCV. A good knowledge of Numpy is required to write better optimized<br>code with OpenCV.</p><p><em>( Examples will be shown in a Python terminal, since most of them are just single lines of code )</em></p><h2 id="Accessing-and-Modifying-pixel-values"><a href="#Accessing-and-Modifying-pixel-values" class="headerlink" title="Accessing and Modifying pixel values"></a>Accessing and Modifying pixel values</h2><p>Let’s load a color image first:</p><pre><code class="python">&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; import cv2 as cv&gt;&gt;&gt; img = cv.imread(&#39;messi5.jpg&#39;)</code></pre><p>You can access a pixel value by its row and column coordinates. For BGR image,<br>it returns an array of Blue, Green, Red values. For grayscale image, just<br>corresponding intensity is returned.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Programing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Beautiful Soup </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
