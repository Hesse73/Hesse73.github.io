<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>下载百度文库非VIP专享资源</title>
      <link href="/2020/08/21/%E4%B8%8B%E8%BD%BD%E7%99%BE%E5%BA%A6%E6%96%87%E5%BA%93%E9%9D%9EVIP%E4%B8%93%E4%BA%AB%E8%B5%84%E6%BA%90/"/>
      <url>/2020/08/21/%E4%B8%8B%E8%BD%BD%E7%99%BE%E5%BA%A6%E6%96%87%E5%BA%93%E9%9D%9EVIP%E4%B8%93%E4%BA%AB%E8%B5%84%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h2 id="Word文档、TXT、PDF和XLS"><a href="#Word文档、TXT、PDF和XLS" class="headerlink" title="Word文档、TXT、PDF和XLS"></a>Word文档、TXT、PDF和XLS</h2><p>这个直接手动复制就行</p><p>如果是Chrome，直接按F12进开发者选项 -&gt; F1进高级设置 -&gt; 找到“Debugger”，点击“Disabe Javascript”，禁用Javascript就可以复制.</p><p><img src="/2020/08/21/%E4%B8%8B%E8%BD%BD%E7%99%BE%E5%BA%A6%E6%96%87%E5%BA%93%E9%9D%9EVIP%E4%B8%93%E4%BA%AB%E8%B5%84%E6%BA%90/Pic1.png" alt="禁用JS"></p><h2 id="PPT文档"><a href="#PPT文档" class="headerlink" title="PPT文档"></a>PPT文档</h2><p>百度文库的PPT是以图片显示的，如果下载只能把图片全部爬取然后转格式</p><p>下面用Selenium + Chrome来操作一下：</p><pre><code class="python">import osimport timeimport requestsfrom selenium import webdriverfrom selenium.webdriver.common.keys import Keys#设置链接地址url = &#39;https://wenku.baidu.com/view/d36080e386c24028915f804d2b160b4e777f81ee.html&#39;#使用Chrome打开driver = webdriver.Chrome()# 用get打开百度文库页面driver.get(url)#找到“继续浏览”的按钮button = driver.find_element_by_class_name(&quot;down-arrow.goBtn&quot;)#此时网页会自动下拉到按钮位置，但由于底栏浮动在表面，无法点击&quot;&quot;&quot;#方法一：隐藏底栏#js = &#39;document.getElementsByClassName(&quot;reader-tools-bar-wrap tools-bar-small tools-bar-smaller&quot;)[0].setAttribute(&quot;style&quot;,&quot;display:none;&quot;)&#39;#driver.execute_script(js)方法二：滚动页面至按钮可见&quot;&quot;&quot;js = &#39;document.getElementsByClassName(&quot;down-arrow goBtn&quot;)[0].scrollIntoView()&#39;driver.execute_script(js)#点击按钮button.click()#获取页面数量counts = len(driver.find_elements_by_css_selector(    &#39;div[class^=&quot;ppt-page-item&quot;]&#39;))#循环获取图片并保存i = 0while(i &lt; counts):    try:        #获取第i个界面        page_class = &quot;ppt-image-wrap&quot;        page = driver.find_elements_by_class_name(page_class)[i]        #滚动到页面位置        driver.execute_script(            &quot;document.getElementsByClassName(&#39;ppt-image-wrap&#39;)[&quot;+str(i)+&quot;].scrollIntoView();&quot;)        #获取图片地址并下载保存        pic_url = page.find_element_by_tag_name(&#39;img&#39;).get_attribute(&#39;src&#39;)        pic = requests.get(pic_url)        #保存图片到‘save’文件夹中        filename = &quot;Pic&quot;+str(i)+&quot;.jpg&quot;        with open(&#39;save\\&#39;+filename, &quot;wb&quot;) as picfile:            picfile.write(pic.content)        pic.close()        i += 1        #显示已获取图片数        os.system(&#39;cls&#39;)        print(str(i)+&#39;Picture(s) downloaded&#39;)    except:        #可能会由于请求太频繁而出错        time.sleep(1)# 关闭浏览器driver.close()</code></pre><p>效果不错，示例文档图片均可以下载:</p><p><img src="/2020/08/21/%E4%B8%8B%E8%BD%BD%E7%99%BE%E5%BA%A6%E6%96%87%E5%BA%93%E9%9D%9EVIP%E4%B8%93%E4%BA%AB%E8%B5%84%E6%BA%90/Pic2.png" alt="保存的图片"></p>]]></content>
      
      
      <categories>
          
          <category> Programing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python获取OpenCV官方文档并保存为Markdown文件</title>
      <link href="/2020/08/21/Python%E8%8E%B7%E5%8F%96OpenCV%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E5%B9%B6%E4%BF%9D%E5%AD%98%E4%B8%BAMarkdown%E6%96%87%E4%BB%B6/"/>
      <url>/2020/08/21/Python%E8%8E%B7%E5%8F%96OpenCV%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E5%B9%B6%E4%BF%9D%E5%AD%98%E4%B8%BAMarkdown%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>看到一个html转markdown的工具，拿来试试保存OpenCV文档&lt;(￣︶￣)</p><hr><h3 id="OpenCV官网文档："><a href="#OpenCV官网文档：" class="headerlink" title="OpenCV官网文档："></a>OpenCV官网文档：</h3><p>如图所示，“top”和“footer”部分是不需要的内容，直接删除即可：</p><p><img src="/2020/08/21/Python%E8%8E%B7%E5%8F%96OpenCV%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E5%B9%B6%E4%BF%9D%E5%AD%98%E4%B8%BAMarkdown%E6%96%87%E4%BB%B6/Pic1.png" alt="官网页面"></p><p>网页中的代码框并非使用code标签，需要更改：<br><img src="/2020/08/21/Python%E8%8E%B7%E5%8F%96OpenCV%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E5%B9%B6%E4%BF%9D%E5%AD%98%E4%B8%BAMarkdown%E6%96%87%E4%BB%B6/Pic2.png" alt="代码框"></p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><pre><code class="python">import requestsfrom bs4 import BeautifulSoupimport html2text as ht#打开并解析网页html = requests.get(    &#39;https://docs.opencv.org/master/d3/df2/tutorial_py_basic_ops.html&#39;).textsoup = BeautifulSoup(html)#删除top和addresssoup.find(&#39;div&#39;, id=&#39;top&#39;).extract()soup.find(&#39;address&#39;, class_=&#39;footer&#39;).extract()#为了美观，将网页页眉的标签改为&lt;h1&gt;header = soup.find(&#39;div&#39;, class_=&#39;header&#39;)new_h = soup.new_tag(&#39;h1&#39;)new_h.append(header.text)header.insert_after(new_h)#删除原页眉内容soup.find(&#39;div&#39;, class_=&#39;headertitle&#39;).extract()#将网页中的代码框替换为&lt;code&gt;格式for fragment in soup.find_all(&#39;div&#39;, class_=&#39;fragment&#39;):    &#39;&#39;&#39;    遍历所有的代码框，在其中添加code标签    并将原有内容按行复制到code标签中    &#39;&#39;&#39;    new_tag = soup.new_tag(&#39;code&#39;)    for line in fragment.contents:        new_p = soup.new_tag(&#39;p&#39;)        new_p.append(line.text)        new_tag.append(new_p)    fragment.insert_after(new_tag)#删除原有的代码for line in soup.find_all(&#39;div&#39;, class_=&#39;line&#39;):    line.extract()html = str(soup)#使用html2text工具将html转为Markdownmd = ht.HTML2Text()md.ignore_links = Truemdfile = md.handle(html)#这里可能是html2text的问题，不能将code格式转为代码块，故手动改一下mdfile = mdfile.replace(&#39;`&#39;, &#39;```&#39;)file = open(&#39;test.md&#39;, &#39;w&#39;)file.write(mdfile)file.close()html.close()</code></pre><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><p>结果非常的Amazing啊！不多说，上图片：</p><p><img src="/2020/08/21/Python%E8%8E%B7%E5%8F%96OpenCV%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E5%B9%B6%E4%BF%9D%E5%AD%98%E4%B8%BAMarkdown%E6%96%87%E4%BB%B6/Pic3.png" alt="MarkDown结果"></p><p>这里再贴上用Hexo渲染的一段：</p><blockquote><h1 id="Basic-Operations-on-Images"><a href="#Basic-Operations-on-Images" class="headerlink" title="Basic Operations on Images"></a>Basic Operations on Images</h1><h2 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h2><p>Learn to:</p><ul><li>Access pixel values and modify them</li><li>Access image properties</li><li>Set a Region of Interest (ROI)</li><li>Split and merge images</li></ul><p>Almost all the operations in this section are mainly related to Numpy rather<br>than OpenCV. A good knowledge of Numpy is required to write better optimized<br>code with OpenCV.</p><p><em>( Examples will be shown in a Python terminal, since most of them are just single lines of code )</em></p><h2 id="Accessing-and-Modifying-pixel-values"><a href="#Accessing-and-Modifying-pixel-values" class="headerlink" title="Accessing and Modifying pixel values"></a>Accessing and Modifying pixel values</h2><p>Let’s load a color image first:</p><pre><code class="python">&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; import cv2 as cv&gt;&gt;&gt; img = cv.imread(&#39;messi5.jpg&#39;)</code></pre><p>You can access a pixel value by its row and column coordinates. For BGR image,<br>it returns an array of Blue, Green, Red values. For grayscale image, just<br>corresponding intensity is returned.</p></blockquote><p>其实除了变得漂亮一点并没有什么用……</p>]]></content>
      
      
      <categories>
          
          <category> Programing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Beautiful Soup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某技校健康打卡脚本</title>
      <link href="/2020/08/13/%E6%9F%90%E6%8A%80%E6%A0%A1%E5%81%A5%E5%BA%B7%E6%89%93%E5%8D%A1%E8%84%9A%E6%9C%AC/"/>
      <url>/2020/08/13/%E6%9F%90%E6%8A%80%E6%A0%A1%E5%81%A5%E5%BA%B7%E6%89%93%E5%8D%A1%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="Slenium版本"><a href="#Slenium版本" class="headerlink" title="Slenium版本"></a>Slenium版本</h2><p>很简单，直接模拟登录就好了……</p><pre><code class="python">import timefrom selenium import webdriverfrom selenium.webdriver.common.keys import Keysfrom selenium.common.exceptions import NoSuchElementException#设置链接地址url = r&#39;https://passport.ustc.edu.cn/login?service=https%3A%2F%2Fweixine.ustc.edu.cn%2F2020%2Fcaslogin&#39;#设置登录信息usr = &#39;认证系统用户名&#39;pwd = &#39;认证系统密码&#39;#打开chromedriver = webdriver.Chrome()# 用get打开登录页面并找到填充的元素driver.get(url)#自动登录InputName = driver.find_element_by_id(&#39;username&#39;)InputPwd = driver.find_element_by_id(&#39;password&#39;)LoginBtn = driver.find_element_by_id(&#39;login&#39;)InputName.send_keys(usr)InputPwd.send_keys(pwd)LoginBtn.click()#此处需要手动暂停，已保证网页自动加载以往打卡配置time.sleep(1)#进入上报界面找到上报按钮，点击即可ReportBtn = driver.find_element_by_id(&#39;report-submit-btn&#39;)#滚动至按钮显示js = &#39;document.getElementById(&quot;report-submit-btn&quot;).scrollIntoView()&#39;driver.execute_script(js)#点击按钮ReportBtn.click()try:    AlertMsg = driver.find_element_by_class_name(&#39;alert&#39;)    print(AlertMsg.text)except:    print(&#39;failed with clicking report button&#39;)driver.close()</code></pre><h2 id="直接用Requests-bs4"><a href="#直接用Requests-bs4" class="headerlink" title="直接用Requests+bs4"></a>直接用Requests+bs4</h2><p>这个实在是太麻烦了，要配置一堆东西，还不如下个chromedriver方便 qwq</p><p>Github上有位大佬用这种方法写了：<a href="https://github.com/xbb1973/USTC-ncov-AutoReport/blob/master/Autoreport.py">点击查看</a></p><p>膜拜</p><p>放到服务器上开个crontab定时打卡应该会很方便（尽管我还并没有试过）</p>]]></content>
      
      
      <categories>
          
          <category> Programing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
